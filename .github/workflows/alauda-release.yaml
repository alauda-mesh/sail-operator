name: Alauda Release workflow

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version"
        required: true
      bundle_channels:
        description: "Bundle channels"
        required: true
        default: "stable,stable-2.0"
      is_draft_release:
        description: "Draft release"
        type: boolean
        required: false
        default: true
      is_pre_release:
        description: "Pre-release"
        type: boolean
        required: false
        default: false

run-name: Release ${{ inputs.release_version }}

env:
  GIT_USER: ${{ secrets.GIT_USER }}
  GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
  ISTIO_REPO_TOKEN: ${{ secrets.GIT_TOKEN }}
  VERSION: ${{ inputs.release_version }}
  TOOLS_REGISTRY_PROVIDER: gcr.m.daocloud.io
  VERSIONS_YAML_FILE: alauda-versions.yaml
  GENERATE_RELATED_IMAGES: "true"
  VENDOR_LD_EXTRAFLAGS: ${{ vars.LD_EXTRAFLAGS }}

jobs:
  release:
    runs-on: [self-hosted, linux, x64]

    steps:
    - name: Install GH CLI
      uses: dev-hanz-ops/install-gh-cli-action@v0.2.1

    - name: Login to build-harbor.alauda.cn
      uses: docker/login-action@v3
      with:
        registry: build-harbor.alauda.cn
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - uses: actions/checkout@v4

    - name: Build and push operator image
      run: |
        make alauda-docker-buildx \
          -e TAG=$VERSION

    - name: Generate bundle metadata
      run: |
        make bundle \
          -e TAG=$VERSION \
          -e CHANNELS=$CHANNELS
      env:
        CHANNELS: ${{ inputs.bundle_channels }}

    - name: Build and push bundle image
      continue-on-error: true
      run: |
        make bundle-build \
          -e VERSION=$VERSION
        make bundle-push

    - name: Create GitHub release
      run: |
        make create-gh-release \
          -e GH_PRE_RELEASE=$GH_PRE_RELEASE \
          -e GH_RELEASE_DRAFT=$GH_RELEASE_DRAFT
      env:
        GH_PRE_RELEASE: ${{ github.event.inputs.is_pre_release == 'true' }}
        GH_RELEASE_DRAFT: ${{ github.event.inputs.is_draft_release == 'true' }}
